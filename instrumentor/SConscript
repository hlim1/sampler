from glob import glob
from itertools import chain, ifilter, imap
import re

from utils import extra_build_dirs, instantiate, literal, read_pipe


Import('env')
env = env.Copy(OCAML_LIBS=['unix', 'str', 'cil'], OCAML_WARN='Ael',
               tools=['test'], toolpath=[str(Dir('#instrumentor'))])

env.AppendUnique(OCAML_PATH=extra_build_dirs(env, ['instrumentor', 'ocaml',]) + ['$cil_path'])


########################################################################
#
#  create OCaml source defining sampler version number
#


version_ml = env.Template('version.ml.in', varlist=['VERSION'])


########################################################################
#
#  create OCaml source listing standard library functions
#


symbolPattern = re.compile('^[0-9a-f]{8} [TW] ([$\\w]+)')


def findSymbols(library):
    command = ['nm', '--defined-only', '-g', '-p', str(library)]
    if library.get_suffix() != '.a':
        command.append('-D')
    nm = read_pipe([command], env)
    matches = imap(symbolPattern.match, nm)
    matches = ifilter(None, matches)
    return ( match.group(1) for match in matches )


def libfuncs(target, source, env):
    libraries = source[1:]
    symbols = chain(*imap(findSymbols, libraries))
    symbols = ('"%s"' % symbol for symbol in symbols )
    symbols = ';\n'.join(symbols)

    instantiate(str(source[0]), str(target[0]),
                LIBRARY_FUNCTIONS=symbols,
                LIBRARY_COUNT=len(symbols))


libraries_ml = env.Command('libraries.ml', ['libraries.ml.in',
                                            '/usr/lib/libc_nonshared.a',
                                            '/lib/libc.so.6',
                                            '/lib/libm.so.6'],
                           libfuncs)


########################################################################
#
#  main build targets
#


sourcedir = Dir('.').srcnode().abspath
sources = glob(sourcedir + '/*.ml') + glob(sourcedir + '/*.mli')
from os import getcwd
print 'sources:', sources, 'in', getcwd(), 
env.OcamlObject(sources)

env.OcamlProgram('main.ml')
env.OcamlProgram('cfgTest.ml')
env.OcamlProgram('cfg-to-dot.ml')
env.OcamlProgram('checker.ml')
env.OcamlProgram('dump.ml')
env.OcamlProgram('loopless.ml')

Default('main')


#########################################################################
#
#  regression test subdirs
#

SConscript(dirs=['branches', 'nothing'], exports='env')

# todo: various regression test subdirs
