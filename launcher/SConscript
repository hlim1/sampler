Import('env')

env = env.Clone(tools=['python'], toolpath=['.'])
env.File('python.py')

common = env.Dir('#launcher/common')

def testPythons(env, sources):
    env = env.Clone()
    env.AppendUnique(ENV={'PYTHONPATH': common.abspath})
    target = 'pychecker.passed'
    test = env.TestPython(target=target, source=sources)
    Alias('test', test)

def servicesDir(context):
    context.Message('checking for DBUS session services subdirectory: ')
    ok, value = context.TryAction([['pkg-config', '--variable=session_bus_services_dir', 'dbus-1', '>$TARGET']])
    if ok:
        value = value.rstrip()
        context.env['servicesdir'] = value
        context.Result(value)
        return value
    else:
        context.Result('unknown')
        context.env.Exit(1)

conf = env.Configure(help=False, custom_tests={'ServicesDir': servicesDir})
conf.ServicesDir()
conf.Finish()


compileSchema = '`pkg-config --variable=glib_compile_schemas gio-2.0`'
schemas = 'edu.wisc.cs.cbi.gschema.xml'
passed = schemas + '.passed'
Alias('test',
      env.Command(passed, schemas, [
            compileSchema + ' --strict --dry-run --schema-file=$SOURCE',
            Touch('$TARGET'),
            ]))

[installed] = env.Install('$DESTDIR$schemadir', schemas)
Alias('install', installed)
if env['GSETTINGS_SCHEMAS_COMPILE']:
    postAction = compileSchema + ' $DESTDIR$schemadir'
    env.AddPostAction(installed, postAction)

migrate = 'edu.wisc.cs.cbi.migrate'
migrateDir = '$DESTDIR$datadir/GConf/gsettings'
Alias('install', env.Install(migrateDir, migrate))


SConscript(dirs=[
    'common',
    'first-time',
    'pixmaps',
    'tray',
    'wrapper',
    ],
           exports=['env', 'testPythons'])
