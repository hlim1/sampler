#!/usr/bin/perl -w

use strict;
use Data::Dumper;
use File::Basename;
use Storable;

my $numTrials;
my $numNotCrash;

my %total;


########################################################################


sub bump (\$) {
    my $ref = shift;
    $$ref = 0 unless defined $$ref;
    ++$$ref;
}


sub tally ($$$$) {
    my ($crashed, $site, $order, $count) = @_;

    if ($count) {
	my $invariant = "$site\t$order";
	bump $total{$invariant}{true};
	bump $total{$invariant}{trueAndNotCrash} if !$crashed;
    }
}


foreach my $pst (@ARGV) {
    print "loading $pst...\n";
    my $seed = basename $pst, '.pst';
    my $trace = retrieve $pst;

    ++$numTrials;

    my $crashed = $trace->{result};
    ++$numNotCrash if !$crashed;

    while (my ($site, $counts) = each %{$trace}) {
	next if $site eq 'result';

	tally $crashed, $site, 'less', $counts->{less};
	tally $crashed, $site, 'equal', $counts->{equal};
	tally $crashed, $site, 'greater', $counts->{greater};
	tally $crashed, $site, 'reached', $counts->{less} + $counts->{equal} + $counts->{greater};
    }
}


########################################################################


sub conviction (\%) {
    my %probe = %{(shift)};

    my $a = $probe{true};
    my $notB = $numNotCrash;
    my $aAndNotB = $probe{trueAndNotCrash};

    my $numerator = $a * $notB;
    my $conviction =
	$aAndNotB
	? $numerator / $aAndNotB / $numTrials
	: ($numerator ? 'inf' : 'nan');

    return $conviction;
}


print "computing convictions...\n";

my %conviction;

while (my ($invariant, $probe) = each %total) {
    my $conviction = conviction %{$probe};
    $conviction{$invariant} = $conviction if $conviction != 1;
}


########################################################################


print "sorting convictions...\n";

my @sorted = sort { $conviction{$b} <=> $conviction{$a} } keys %conviction;

foreach my $invariant (@sorted) {
    print "$conviction{$invariant}\t$invariant\n";
}
