Import('env')
env = env.Clone()
env.AppendUnique(CC=['-ftrace-sites'] + ['-fsampler-scheme=' + s for s in ('branches', 'data', 'function-entries')])

File('library.h')

modular = env.CBIProgram(target='modular', source=['modular-a.c', 'modular-b.c'])

plugin = env.CBISharedLibrary(target='plugin.so', source='plugin.c')
library = env.CBISharedLibrary(target='library.so', source='library.c')
program = env.CBIProgram(source=['sharing.c', library], LIBS='dl')
sharing = env.CBIReports([program, library, plugin])

simple = env.CBIProgram('simple.c')

tenv = env.Clone()
tenv.AppendUnique(CC=['-pthread'])
threads = tenv.CBIProgram('threads.c')

Alias('test:trace', map(env.Expect, [
    env.CBISites('simple', objects=simple),
    env.CBISites('modular', objects=modular),
    env.CBISites('sharing', objects=[program, library, plugin]),
    tenv.CBISites('threads', objects=threads),
    ]))

Alias('test', 'test:trace')

File(Glob('*.expected'))
