#!/usr/bin/perl -w


use strict;

use Expect;
use File::Basename;
use File::Copy;
use File::Path;
use FileHandle;


die "Usage: $0 <first-seed> <last-seed>\n" unless @ARGV == 2;
my ($first, $last) = @ARGV;


#$Expect::Debug = 1;
$Expect::Log_Stdout = 0;


########################################################################


sub check_system (@) {
    system(@_) == 0 or die "$_[0] failed: $!\n";
}

sub check_copy ($$) {
    copy(@_) or die "copy failed: $!\n";
}


my $original = '/usr/share/doc/vnc-doc-3.3.3r2';
my $home = dirname $0;
my $pristine = "$home/pristine";
my $ccrypt_standard = "$home/standard/src/ccrypt";
my @files = ();

rmtree $pristine;
mkdir $pristine;

print "copying cyphertext\n";
foreach (glob "$original/*") {
    next unless -f;
    push @files, basename $_;
    check_copy $_, $pristine;
}

print "encrypting cyphertext\n";
check_system $ccrypt_standard, '-r', '-e', '-K', 'good', $pristine;

print "copying cleartext\n";
foreach (@files) {
    check_copy "$original/$_", $pristine;
}


########################################################################


my $ccrypt_sampled = 'always-returns/src/ccrypt';

# occasionally pick the wrong password
my @words = ('good', 'good', 'good', 'good', 'bad', undef);
#my @words = ('good');

my @modes = ('', '-e', '-d', '-c', '-x');

my %suffix = ('' => '',
	      '-e' => '',
	      '-d' => '.cpt',
	      '-c' => '.cpt',
	      '-x' => '.cpt');


########################################################################


sub pick (@) {
    $_[int(rand(@_))];
}


sub pick_send ($@) {
    my $process = shift;
    my $response = pick @_;
    if (defined $response) {
	warn "      sending \"$response\"\n";
	$response .= "\r";
    } else {
	warn "      sending premature EOF\n";
	$response = "\cD";
    }
    $process->send($response);
    exp_continue;
}


sub pick_yes_or_no ($@) {
    my $process = shift;
    warn "    saw yes/no prompt\n";
    pick_send $process, ('y', 'yes', 'n', 'no', '', 'foo',
			 undef, undef, undef, undef, undef, undef,
			 undef, undef, undef, undef, undef, undef);
}


sub pick_key ($@) {
    my $process = shift;
    warn "    saw key prompt\n";
    pick_send $process, @words;
}


########################################################################


foreach my $seed ($first .. $last) {

    srand $seed;
    warn "seed $seed\n";
    
    warn "  resetting playground\n";
    system ('rsync', '--delete', '--force', '-a', "$pristine/", 'playground') == 0
	or die "rsync failed: $?: $!\n";
    
    my $mode = pick @modes;
    my $file = pick(@files) . $suffix{$mode};
    my @command = ($ccrypt_sampled);
    push @command, $mode if $mode;
    push @command, "playground/$file";

    warn "  spawn command: @command\n";

    my $trace = sprintf 'traces/%05d.trace', $seed;
    $ENV{SAMPLER_FILE} = $trace;

    my $process = Expect->spawn (@command) or die $!;
    $process->expect(undef,
		     ' key: (repeat) ', \&pick_key,
		     ' key: ', \&pick_key,
		     ' (y or n)? ', \&pick_yes_or_no);

    warn '    process exited with code ', $process->exitstatus(), "\n";
    -r $trace or die "no trace recorded\n";
}

warn "finis\n";
