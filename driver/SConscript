Import('env')


def checkProgName(context, name):
    context.Message('checking for %s: ' % name)
    action = context.env.Action([['$gcc', '-print-prog-name=%s' % name, '>', '$TARGET']], varlist=['gcc'])
    (status, command) = context.TryAction(action)
    if status:
        command = command.rstrip()
        command = context.env.WhereIs(command)
        if command:
            context.Result(command)
            return command
        else:
            context.Result('(not found)')
            return ''
    else:
        context.Result(False)
        context.env.Exit(1)

conf = env.Configure(
    clean=False, help=False,
    custom_tests={'CheckProgName': checkProgName})

cc1 = conf.CheckProgName('cc1')
asm = conf.CheckProgName('as')
objcopy = env.WhereIs('objcopy')

conf.Finish()


env = env.Clone(
    PACKAGE='sampler',
    cc1=cc1, asm=asm,
    objcopy=objcopy,
    )

asm = env.Template('as.in', varlist=['asm', 'objcopy'])
cc1 = env.Template('cc1.in', varlist=['cc1'])
cc = env.Template('sampler-cc.in', varlist=['PACKAGE', 'prefix', 'exec_prefix', 'libdir', 'pkglibdir', 'driverdir', 'gcc'])
here = env.Template('sampler-cc-here.in', varlist=['gcc'])
specs = env.Template('sampler-specs.in', varlist=['tuple_counter_bits'])

Dir('lib')
Default([asm, cc1, cc, here, specs, 'lib', 'sampler'])


Alias('install', [
    env.Install('$DESTDIR$bindir', cc),
    env.Install('$DESTDIR$driverdir', [asm, cc1, 'sampler-specs']),
    ])
