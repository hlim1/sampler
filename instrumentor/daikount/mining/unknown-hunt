#!/usr/bin/perl -w

use strict;
use Miner;

my $numTrials;
my $numCrash;

my @total;


########################################################################


sub tally ($$$$) {
    my ($crashed, $siteId, $order, $count) = @_;

    unless (exists $total[$siteId]{$order}) {
	$total[$siteId]{$order}{true}{crash} = 0;
	$total[$siteId]{$order}{true}{succeed} = 0;
	$total[$siteId]{$order}{false}{crash} = 0;
	$total[$siteId]{$order}{false}{succeed} = 0;
    }

    ++$total[$siteId]{$count ? 'true' : 'false'}{$crashed ? 'crash' : 'succeed'};
}


foreach my $seed ($ARGV[0] .. $ARGV[1]) {
    print "loading trial $seed: ";

    ++$numTrials;

    my $crashed = Miner::loadResult($seed);
    ++$numCrash if $crashed;
    print "result $crashed: ";

    my $trace = Miner::readTrace($seed);
    my $siteId = 0;

    while (<$trace>) {
	chomp;
	my @F = split /\t/;
	die unless @F == 9;

	++$siteId;
	tally $crashed, $siteId, 'less', $F[6];
	tally $crashed, $siteId, 'equal', $F[7];
	tally $crashed, $siteId, 'greater', $F[8];
    }

    print "$siteId sites\n";
}


########################################################################


# my $key = "/home/cs/liblit/research/forensics/sampling/apps/bc-1.06/daikount/../src/bc/storage.c	176	more_arrays	indx	a_count	620	greater";


local ($,, $\) = ("\t", "\n");

foreach my $siteId (0 .. $#total) {
    while (my ($order, $counts) = each %{$total[$siteId]}) {
	print $siteId, $order, $counts;
    }
}
