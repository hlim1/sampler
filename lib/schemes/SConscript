Import('env')
env = env.Clone()
env.AppendUnique(LIBPREFIX='${LIBPREFIX}sampler-')
if env['tuple_counter_bits'] != 'natural':
    env.AppendUnique(CPPDEFINES={'CBI_TUPLE_COUNTER_BITS': '$tuple_counter_bits'})

sources = [
    'samples.c',
    'timestamps.c',
    'tuple-1.c',
    'tuple-2.c',
    'tuple-3.c',
    'tuple-4.c',
    'tuple-9.c',
]

libschemes = env.TwoLibraries('schemes', sources)
env.File('samples.h')

senv = env.Clone()
senv.AppendUnique(
    LIBS=libschemes,
    )

for scheme in ['bounds', 'branches', 'coverage', 'function-entries', 'returns', 'scalar-pairs']:
    senv.TwoLibraries(scheme, [scheme + '.c'])

senv.TwoLibraries('float-kinds', ['float-kinds.c'], LIBS=['$LIBS', 'm'])

genv = senv.Clone()
genv.ParseConfig(['pkg-config', '--cflags', '--libs', 'gobject-2.0'])
gsources = ['g-object-unref.c', 'g-object-unref-classify.c']
genv.TwoLibraries('g-object-unref', gsources)

tenv = senv.Clone()
tenv.AppendUnique(LIBS=['pthread'])
tenv.TwoLibraries('yields', ['yields.c'])
tenv.TwoLibraries('atoms', ['atoms.c'])
tenv.TwoLibraries('fun-reentries', ['fun-reentries.c'])
tenv.TwoLibraries('compare-swap', ['compare-swap.c'])
tenv.TwoLibraries('atoms-rw', ['atoms-rw.c'])


headers = [
    'atoms-unit.h',
    'atoms.h',
    'bounds-unit.h',
    'bounds.h',
    'branches-unit.h',
    'branches.h',
    'coverage-unit.h',
    'coverage.h',
    'float-kinds-unit.h',
    'float-kinds.h',
    'function-entries-unit.h',
    'function-entries.h',
    'g-object-unref-unit.h',
    'g-object-unref.h',
    'returns-unit.h',
    'returns.h',
    'scalar-pairs-unit.h',
    'scalar-pairs.h',
    'tuple-1.h',
    'tuple-2.h',
    'tuple-3.h',
    'tuple-4.h',
    'tuple-9.h',
    'tuple-bits.h',
    'yields-unit.h',
    'yields.h',
    'fun-reentries-unit.h',
    'fun-reentries.h',
    'compare-swap-unit.h',
    'compare-swap.h',
    'atoms-rw-unit.h',
    'atoms-rw.h',
]

Install('#driver/sampler/schemes', headers)
Alias('install', env.Install('$DESTDIR$schemesdir', headers))
