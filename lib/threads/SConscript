from os.path import basename


def threadLibs(env, subdir):
    env.AppendUnique(CPPPATH=['.'])
    env.AppendUnique(CCFLAGS=['-ffast-math', '-fpic'])

    def inst(targets):
        instdir = '$DESTDIR/usr/lib'
        Alias('install', env.Install(instdir, targets))

    def libs(target, sources):
        target += '${REENTRANT}'
        sharedSources = [env.SharedObject(basename(source), source + '.c') for source in sources]
        staticSources = [env.StaticObject(basename(source), source + '.c') for source in sources]
        shared = env.SharedLibrary(target, sharedSources)
        static = env.StaticLibrary(target, staticSources)
        targets = [shared, static]
        #Default(targets)
        Alias('install', env.Install('$DESTDIR/usr/lib', targets))

    parts = ['countdown', 'initialize', 'registry', 'report', 'timestamps-set', 'verbose']
    sources = ['hijack'] + ['../%s' % part for part in parts]
    libs('sampler', sources)

    for when in ['fixed', 'offline', 'online']:
        src = '../random-%s' % when
        libs('sampler-%s' % when, [src])

    Alias('install', env.Install('$DESTDIR$threadsdir/%s' % subdir, ['lock.h', 'once.h']))


Import('env')

headers = [
    'countdown.h',
    'local.h',
    'random-fixed.h',
    'random-offline.h',
    'random-offline-size.h',
    'random-online.h',
    ]

Alias('install', env.Install('$DESTDIR$threadsdir', headers))


SConscript(dirs=['no', 'yes'], exports=['env', 'threadLibs'])
