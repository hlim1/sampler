Import('env')
env = env.Copy()
env.AppendUnique(CCFLAGS=['--sampler-scheme=branches'])

modular = env.CBIProgram(target='modular', source=['modular-a.c', 'modular-b.c'])

tenv = env.Copy()
tenv.AppendUnique(CCFLAGS=['-pthread'], LINKFLAGS=['-pthread'])

plugin = env.CBISharedLibrary(target='plugin.so', source='plugin.c')
library = env.CBISharedLibrary(target='library.so', source='library.c')
program = env.CBIProgram(source=['sharing.c', library], LIBS='dl')
sharing = env.CBIReports([program, library, plugin])

Alias('test:branches', env.Expect([
    env.CBIResolvedSamples('simple.c'),
    env.CBIResolvedSamples(modular),
    env.CBIResolvedSamples(sharing),
    tenv.CBIResolvedSamples('threads.c', TEST_STDOUT='/dev/null'),
    ]))

Alias('test', 'test:branches')
