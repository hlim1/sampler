-*- outline -*-

* launcher

GNOME launcher's server reply dialog has bad tab navigation.  If focus
is on a hyperlink in the HTML area, you cannot tab out to the "OK"
button.

How does launcher propagate SIGINT (^C) down to child?

Add some sort of upper bound on upload lengths to prevent things from
getting completely out of hand if the instrumented application gets
into a bad loop.

If server offered a reply message, launcher doesn't seem to end
connection from server until reply message dialog has been dismissed.
We should disconnect sooner.

* packaging

Check copyright notice in configure scripts that use SAMPLER_INIT.
Check both script text as well as "configure --version" output.

Consider adding some sort of "README.sampler" to the documentation for
each sampled application RPM.

* instrumentor

** threads

Each thread starts its own random sequence of countdowns with the same
initial state used when the application first launched.  An
alternative would be for all threads to share the same random state.
This would require locking: what performance penalty would result?
Would this give us more truly random countdowns?

I'm not thrilled with the fact that each thread starts with the same
initial state.  If they're not sharing state, can we still seed each
one with a different initial state?  Can we do this without giving up
the ability to record a single starting seed for the entire app?

** general

Document --{no-,}assume-weightless-{libraries,externs} and hook them
up in the Perl driver.

PairClassifier.visitor does a lot of redundant work to re-scan for
globals from the start of the file for each new instance.  We should
be able to accumulate this incrementally as we go along.

Remember which functions are loopless.  Use this to optimize treatment
of calls to known loopless functions.

instrumentor/logging/loads/tests/multiple is incorrectly printing a
single value multiple times

assume that anything declared in /usr/include/... or
/usr/lib/gcc-lib/... or perhaps a few other places is library code
