#!/usr/bin/perl -w

use strict;
use 5.008;			# for safe pipe opens using list form of open

use Fcntl qw(SEEK_SET);
use FileHandle;


########################################################################


sub check_signature ($$$) {
    my ($filename, $lineno, $signature) = @_;
    die "$filename:$lineno: malformed signature: $signature\n"
	unless $signature =~ /^[0-9A-Fa-f]{32}$/
}


########################################################################


my %compilationUnit;


foreach my $objectName (@ARGV) {
    my $buffer;

    if ($objectName =~ /\.sites$/) {
	my $handle = new FileHandle $objectName, 'r';
	unless ($handle) {
	    warn "warning: cannot read $objectName: $!\n";
	    next;
	}
	local $/;
	$buffer = $handle->getline;

    } else {
	my $objdump = new FileHandle;
	if (! open $objdump, '-|', 'objdump', '-h', '-w', $objectName) {
	    warn "warning: cannot run objdump on $objectName: $!\n";
	    next;
	}

	my $size;
	my $offset;
	while (<$objdump>) {
	    my @field = split;
	    next unless @field >= 7;
	    next unless $field[1] eq '.debug_site_info';
	    next unless $field[0] =~ /^\d+$/;
	    $size = hex $field[2];
	    $offset = hex $field[5];
	    last;
	}
	die "error: objdump failed on $objectName\n" unless $objdump->close;
	next unless $size && defined $offset;

	my $executable = new FileHandle $objectName, 'r';
	$executable->seek($offset, &SEEK_SET);
	$executable->read($buffer, $size);
	$buffer =~ s/\0//g;
    }

    my @lines = split /\n/, $buffer;
    my $lineno = 0;
    while (@lines) {
	my $signature = shift @lines;
	++$lineno;
	check_signature $objectName, $lineno, $signature;
	if (exists $compilationUnit{$signature}) {
	    warn "warning: duplicate signature: $signature\n";
	    warn "warning: first defined in \"$compilationUnit{$signature}{name}\"\n";
	    warn "warning: redefined in \"$objectName\"\n";
	}
	my @sites;
	while (@lines) {
	    my $site = { description => shift @lines };
	    ++$lineno;
	    last if $site->{description} eq '';
	    push @sites, $site;
	}
	$compilationUnit{$signature} = { sites => \@sites,
					 name => $objectName };
    }
}


########################################################################


sub miscount ($$) {
    my ($direction, $signature) = @_;
    die "error: too $direction sites in report for $signature\n";
}


sub skip () {
    while (<STDIN>) {
	chomp;
	last if $_ eq '';
    }
}


$_ = <STDIN>;
chomp;
die "error: malformed report header: $_\n" unless $_ eq '<report id="samples">';

while (my $signature = <STDIN>) {
    chomp $signature;
    last if $signature eq '</report>';
    
    check_signature 'standard input', $., $signature;
    my $unit = $compilationUnit{$signature};
    if ($unit) {
	warn "warning: duplicate signature in report: $signature\n"
	    if $unit->{seen};
	$unit->{seen} = 1;

	my @sites = @{$unit->{sites}};

	while (my $tuple = <STDIN>) {
	    chomp $tuple;
	    last if $tuple eq '';
	    if (@sites) {
		my $site = shift @sites;
		my @tuple = split /\t/, $tuple;
		foreach my $slot (0 .. $#tuple) {
		    $site->{counters}->[$slot] += $tuple[$slot];
		}
	    } else {
		miscount 'many', $signature;
		skip;
		last;
	    }
	}

	miscount 'few', $signature if @sites;
    } else {
	warn "warning: unrecognized signature in report: $signature\n";
	skip;
    }
}



unless (eof) {
    $_ = <STDIN>;
    chomp;
    warn "error: trailing garbage after report: $_\n";
}


local ($,, $\) = ("\t", "\n");

foreach my $signature (sort keys %compilationUnit) {
    my $unit = $compilationUnit{$signature};
    foreach my $site (@{$unit->{sites}}) {
	print $signature, $unit->{name}, $site->{description}, @{$site->{counters}};
    }
}
