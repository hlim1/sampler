#!/usr/bin/perl -w

use strict;
use Carp;
use File::Copy;


@ARGV == 1 || @ARGV == 2 or die "Usage: $0 <ccrypt> [<sparsity>]\n";
my ($ccrypt, $sparsity) = @ARGV;


########################################################################


sub check_system (@) {
    print "+@_\n";
    system(@_) == 0 or croak "$_[0] failed: $!\n";
}


sub check_copy ($$) {
    copy(@_) or croak "copy failed: $!\n";
}


foreach my $seed (1 .. 4) {
    my $input = "inputs/$seed.noise";
    die unless -r $input;

    if ($sparsity) {
	my $counts = "inputs/$sparsity-$seed.counts";
	$ENV{SAMPLER_EVENT_COUNTDOWNS} = $counts;
	$ENV{SAMPLER_SPARSITY} = $sparsity;
	$ENV{GSL_RNG_SEED} = $seed;
	check_system '../../libcountdown/precompute', $counts
	    unless -r $counts;
	check_copy $counts, '/dev/null';
    }

    my $clear = "$input.clear";
    my $crypt = "$clear.cpt";
    unlink $crypt;
    check_copy $input, $clear;
    check_copy $clear, '/dev/null';

    print "SEED=$seed\n";
    check_system 'time', $ccrypt, '-K', 'good', $clear;

    unlink $clear, $crypt;
}
