#!@PERL@ -w

use strict;

use Common;

my $dbh = Common::connect;

my $result;
my $count;


########################################################################
#
#  various fields should not have degenerate or default values
#

sub check_value ($$$$$) {
    my ($table, $field_id, $field_check, $op, $bad) = @_;

    my $badstr = $bad eq '' ? "''" : $bad;
    print "checking for $table.$field_check $op $badstr\n";

    $result = $dbh->selectcol_arrayref(qq{
	SELECT DISTINCT $field_id
	    FROM $table
	    WHERE $field_check $op ?
	}, undef, $bad);

    $count = @{$result};
    if ($count) {
	warn "$count distinct $field_id in $table with $field_check $op $badstr:\n";
	warn "\t$_\n" foreach @{$result};
    }
}


check_value 'build', 'build_id', 'build_id', '<=', 0;
check_value 'build', 'build_id', 'application_name', '=', '';
check_value 'build', 'build_id', 'application_version', '=', '';
check_value 'build', 'build_id', 'application_release', '=', '';
check_value 'build', 'build_id', 'build_distribution', '=', '';
check_value 'build', 'build_id', 'build_date', '<=', '2002-1-1';

check_value 'run', 'run_id', 'run_id', '=', '';
check_value 'run', 'run_id', 'version', '=', '';
check_value 'run', 'run_id', 'sparsity', '<=', 0;
check_value 'run', 'run_id', 'exit_status', '<', 0;
check_value 'run', 'run_id', 'exit_status', '>', 255;
check_value 'run', 'run_id', 'exit_signal', '<', 0;
check_value 'run', 'run_id', 'exit_signal', '>', 255;
check_value 'run', 'run_id', 'date', '<=', '2002-1-1';

check_value 'scheme', 'scheme_name', 'scheme_name', '=', '';
check_value 'scheme', 'scheme_name', 'predicates_per_site', '<=', 0;

check_value 'build_suppress', 'build_id', 'reason', '=', '';
check_value 'run_suppress', 'run_id', 'reason', '=', '';

check_value 'distribution', 'distribution_name', 'distribution_name', '=', '';


########################################################################
#
#  runs cannot have both a fatal signal and a non-zero exit status
#

print "checking for runs with both fatal signal and non-zero exit status\n";

$result = $dbh->selectcol_arrayref(q{
    SELECT run_id
	FROM run
	WHERE exit_status != 0
	AND exit_signal != 0});

$count = @{$result};
if ($count) {
    warn "$count runs with both fatal signal and non-zero exit status\n";
    warn "\t$_\n" foreach @{$result};
}


########################################################################
#
#  suppressed runs should not be in the database
#

print "checking for suppressed runs\n";

$result = $dbh->selectcol_arrayref(q{
    SELECT run_id
	FROM run
	NATURAL JOIN run_suppress});

$count = @{$result};
if ($count) {
    warn "$count suppressed runs\n";
    warn "\t$_\n" foreach @{$result};
}


########################################################################
#
#  runs from suppressed builds should not be in the database
#

print "checking for runs from suppressed builds\n";

$result = $dbh->selectcol_arrayref(q{
    SELECT run_id
	FROM run
	NATURAL JOIN build_suppress});

$count = @{$result};
if ($count) {
    warn "$count runs from suppressed builds\n";
    warn "\t$_\n" foreach @{$result};
}


########################################################################


$dbh->commit;
$dbh->disconnect;

exit 0;
